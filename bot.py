import discord
from discord.ext import commands
import json
import requests
import random
import string
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import os
from datetime import datetime, timedelta
import asyncio
from discord.utils import utcnow
from config import BOT_TOKEN, STEAM_API_KEY, BOT_VERSION
from info import info
from discord.ext import tasks


intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None, case_insensitive=True)

DATA_FILE = 'users_data.json'

GUILDS_FILE = 'guilds.json'
MUTES_FILE = 'mutes.json'

def load_json(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, 'r') as f:
        return json.load(f)

def save_json(filename, data):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

def update_guild_data(guild):
    data = load_json(GUILDS_FILE)
    guild_id = str(guild.id)
    if guild_id not in data:
        data[guild_id] = {
            "name": guild.name,
            "member_count": guild.member_count,
            "messages": 0
        }
    save_json(GUILDS_FILE, data)

def increment_guild_messages(guild_id):
    data = load_json(GUILDS_FILE)
    gid = str(guild_id)
    if gid not in data:
        return
    data[gid]["messages"] += 1
    save_json(GUILDS_FILE, data)

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r') as f:
        return json.load(f)


def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def load_mutes():
    return load_json(MUTES_FILE)

def save_mutes(data):
    save_json(MUTES_FILE, data)

async def apply_mute(member, duration_seconds, reason):
    muted_role = discord.utils.get(member.guild.roles, name="Muted")
    if not muted_role:
        muted_role = await member.guild.create_role(name="Muted")
        for channel in member.guild.channels:
            await channel.set_permissions(muted_role, send_messages=False, speak=False)

    await member.add_roles(muted_role, reason=reason)

    await asyncio.sleep(duration_seconds)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    mutes = load_mutes()
    guild_id = str(member.guild.id)
    user_id = str(member.id)

    if guild_id in mutes and user_id in mutes[guild_id]:
        del mutes[guild_id][user_id]
        save_mutes(mutes)
        await member.remove_roles(muted_role, reason="Mute expired")

def register_user(user):
    data = load_data()
    user_id = str(user.id)

    if user_id not in data:
        data[user_id] = {
            "first_name": user.name,
            "last_name": None,
            "username": user.name,
            "steam": None,
            "twitch": None,

            "wallet_balance": 100,
            "bank_balance": 0,
            "transaction_history": [],

            "clan": None,
            "bot_lang": "ru",
            "bot_theme": 0,

            "level": 1,
            "xp": 0,
            "rank_title": "–ù–æ–≤–∏—á–æ–∫",

            "casino_stats": {
                "games_played": 0,
                "games_won": 0,
                "games_lost": 0,
                "total_winnings": 0,
                "total_losses": 0,
            },

            "daily_activity": {
                "commands_used": 0,
                "messages_sent": 0,
                "games_played": 0,
                "last_active": None,
            },
            "weekly_activity": {
                "messages_sent": 0,
            },
            "achievements": [],
            "last_claim": None,
        }
    else:
        data[user_id]["daily_activity"]["messages_sent"] += 1
        data[user_id]["daily_activity"]["last_active"] = datetime.utcnow().isoformat()

    save_data(data)


def extract_steam_id(profile_url):
    if "steamcommunity.com/profiles/" in profile_url:
        return profile_url.split("/")[-1]
    elif "steamcommunity.com/id/" in profile_url:
        custom_id = profile_url.split("/")[-1]
        r = requests.get(
            f"http://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key={STEAM_API_KEY}&vanityurl={custom_id}"
        )
        res = r.json()
        if res["response"]["success"] == 1:
            return res["response"]["steamid"]
    return None


def get_steam_summary(steam_id):
    r = requests.get(
        f"http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key={STEAM_API_KEY}&steamids={steam_id}"
    )
    data = r.json()
    if "players" in data["response"] and data["response"]["players"]:
        return data["response"]["players"][0]
    return None

@tasks.loop(minutes=1)
async def reset_activity():
    moscow = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow)

    if now.hour == 0 and now.minute == 0:
        with open("users_data.json", "r") as f:
            users_data = json.load(f)

        for user_id in users_data:
            users_data[user_id]["daily_activity"] = {
                "commands_used": 0,
                "messages_sent": 0
            }

            if now.weekday() == 0:  
                users_data[user_id]["weekly_activity"] = {
                    "commands_used": 0,
                    "messages_sent": 0
                }

        with open("users_data.json", "w") as f:
            json.dump(users_data, f, indent=4)

        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞: daily" + (" –∏ weekly" if now.weekday() == 0 else ""))

from discord.ui import Select, View, select, Button

@bot.command(name="help")
async def custom_help(ctx):
    embed = discord.Embed(
        title="üß† –ü–æ–º–æ—â—å –ø–æ VelionBot",
        description="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
        color=discord.Color.green()
    )

    embed.add_field(name="üë§ –ü—Ä–æ—Ñ–∏–ª—å", value="`!profile` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", inline=False)
    embed.add_field(name="üéÆ –ü—Ä–∏–≤—è–∑–∫–∏", value="`!bind_steam <url>` ‚Äî –ü—Ä–∏–≤—è–∑–∞—Ç—å Steam\n`!bind_twitch <url>` ‚Äî –ü—Ä–∏–≤—è–∑–∞—Ç—å Twitch", inline=False)
    embed.add_field(name="üîí –ú–æ–¥–µ—Ä–∞—Ü–∏—è", value="`!mute @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º—è –ø—Ä–∏—á–∏–Ω–∞` ‚Äî –í—ã–¥–∞—Ç—å —Ç–∞–π–º-–∞—É—Ç\n`!unmute @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å` ‚Äî –°–Ω—è—Ç—å —Ç–∞–π–º-–∞—É—Ç", inline=False)
    embed.add_field(name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value="`!serverinfo` ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ", inline=False)
    embed.set_footer(text="VelionBot | –í–≤–µ–¥–∏ !help –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏")

    view = View()
    view.add_item(Button(label="üåê –°–∞–π—Ç", url="https://velion.onrender.com"))
    view.add_item(Button(label="üåê –¢–ì –≤–µ—Ä—Å–∏—è", url="https://veliongamesbot.t.me"))

    await ctx.send(embed=embed, view=view)


@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user = message.author
    user_id = str(user.id)

    data = load_data()
    if user_id not in data:
        register_user(user)
        data = load_data()

    user_data = data[user_id]

    user_data["xp"] += 0.1

    level = user_data["level"]
    xp = user_data["xp"]

    if xp >= level * 100:
        user_data["level"] += 1
        user_data["xp"] = 0

    if "daily_activity" not in user_data:
        user_data["daily_activity"] = {}

    user_data["daily_activity"]["messages_sent"] = user_data["daily_activity"].get("messages_sent", 0) + 1

    if message.content.startswith("!"):
        user_data["daily_activity"]["commands_used"] = user_data["daily_activity"].get("commands_used", 0) + 1

    save_data(data)
    update_guild_data(message.guild)
    increment_guild_messages(message.guild.id)


    await bot.process_commands(message)


# –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è —Ö—É–π–Ω—è
@bot.command()
@commands.has_permissions(moderate_members=True)
async def mute(ctx, member: discord.Member, time: str, *, reason: str = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    units = {"s": 1, "m": 60, "h": 3600, "d": 86400}
    try:
        unit = time[-1]
        number = int(time[:-1])
        seconds = number * units[unit]
    except:
        embed = discord.Embed(
            title="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏",
            description="–ü—Ä–∏–º–µ—Ä: `10m`, `2h`, `1d`, `30s`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    until = utcnow() + timedelta(seconds=seconds)
    await member.timeout(until, reason=reason)

    guild_id = str(ctx.guild.id)
    user_id = str(member.id)
    mutes = load_mutes()

    if guild_id not in mutes:
        mutes[guild_id] = {}

    mutes[guild_id][user_id] = {
        "reason": reason,
        "until": until.isoformat()
    }

    save_mutes(mutes)

    embed = discord.Embed(
        title="üîá –¢–∞–π–º-–∞—É—Ç –≤—ã–¥–∞–Ω",
        description=f"{member.mention} –∑–∞–º—É—á–µ–Ω –Ω–∞ `{time}`",
        color=discord.Color.green()
    )
    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
    embed.set_footer(text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(moderate_members=True)
async def unmute(ctx, member: discord.Member):
    await member.timeout(None, reason="–†–∞–∑–º—É—Ç")

    guild_id = str(ctx.guild.id)
    user_id = str(member.id)
    mutes = load_mutes()

    if user_id not in data:
        register_user(user)
        data = load_data()

    if guild_id in mutes and user_id in mutes[guild_id]:
        del mutes[guild_id][user_id]
        save_mutes(mutes)

    embed = discord.Embed(
        title="üîà –†–∞–∑–º—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
        description=f"{member.mention} —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason: str = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    try:
        await member.ban(reason=reason)
        embed = discord.Embed(
            title="üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω",
            description=f"{member.mention} –±—ã–ª **–∑–∞–±–∞–Ω–µ–Ω**.",
            color=discord.Color.red()
        )
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
        embed.set_footer(text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author}", icon_url=ctx.author.display_avatar.url)
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ",
            description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å {member.mention}\n`{e}`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(ban_members=True)
async def unban(ctx, user_id: int):
    user = await bot.fetch_user(user_id)

    try:
        await ctx.guild.unban(user)

        embed = discord.Embed(
            title="üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω",
            description=f"{user.mention} (`{user_id}`) –±—ã–ª **—Ä–∞–∑–±–∞–Ω–µ–Ω**.",
            color=discord.Color.green()
        )
        embed.set_footer(text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author}", icon_url=ctx.author.display_avatar.url)

        await ctx.send(embed=embed)

    except discord.NotFound:
        embed = discord.Embed(
            title="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ",
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

    except Exception as e:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ",
            description=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}`\n`{e}`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason: str = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    try:
        await member.kick(reason=reason)
        embed = discord.Embed(
            title="ü•æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç",
            description=f"{member.mention} –±—ã–ª **–∫–∏–∫–Ω—É—Ç** —Å —Å–µ—Ä–≤–µ—Ä–∞.",
            color=discord.Color.orange()
        )
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
        embed.set_footer(text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author}", icon_url=ctx.author.display_avatar.url)
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ",
            description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å {member.mention}\n`{e}`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)


@bot.command()
async def bind_steam(ctx, profile_url: str = None):
    if profile_url is None:
        embed = discord.Embed(
            title="–ü—Ä–∏–≤—è–∑–∫–∞ Steam-–ø—Ä–æ—Ñ–∏–ª—è",
            description="üü¢ –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å Steam.\n\n–ü—Ä–∏–º–µ—Ä:\n`/bind_steam https://steamcommunity.com/id/yourname`",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
        return
    
    user_id = str(ctx.author.id)
    data = load_data()


    if "steamcommunity.com" not in profile_url:
        embed = discord.Embed(
            title="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞",
            description="üîó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam (https://steamcommunity.com/...).",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
        return

    if user_id not in data:
        register_user(ctx.author)
        data = load_data() 

    data[user_id]["steam"] = profile_url
    save_data(data)

    embed = discord.Embed(
        title="‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω",
        description=f"–í–∞—à Steam-–ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω:\n{profile_url}",
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=ctx.author.display_avatar.url)
    bot_avatar = bot.user.avatar.url if bot.user.avatar else None

    embed.set_author(
        name="VelionBot ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        icon_url=bot_avatar
    )

    embed.set_footer(text="¬©VelionTeam - 2025")
    await ctx.send(embed=embed)

@bot.command(name='bind_twitch')
async def bind_twitch(ctx, twitch_url=None):
    user_id = str(ctx.author.id)
    data = load_data()

    if user_id not in data:
        register_user(ctx.author)
        data = load_data()

    if not twitch_url:
        embed = discord.Embed(
            title="‚ùå –ü—Ä–∏–≤—è–∑–∫–∞ Twitch",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–π Twitch-–ø—Ä–æ—Ñ–∏–ª—å.\n\n–ü—Ä–∏–º–µ—Ä: `/bind_twitch https://twitch.tv/—Ç–≤–æ–π_–Ω–∏–∫`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    if not twitch_url.startswith("https://twitch.tv/") and not twitch_url.startswith("https://www.twitch.tv/"):
        embed = discord.Embed(
            title="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞",
            description="–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª **–ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É** –Ω–∞ Twitch.\n\n–ü—Ä–∏–º–µ—Ä: `https://twitch.tv/—Ç–≤–æ–π_–Ω–∏–∫`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    data[user_id]['twitch'] = twitch_url
    save_data(data)

    embed = discord.Embed(
        title="‚úÖ Twitch —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
        description=f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: [—Å–º–æ—Ç—Ä–µ—Ç—å]({twitch_url})",
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=ctx.author.display_avatar.url)
    bot_avatar = bot.user.avatar.url if bot.user.avatar else None

    embed.set_author(
        name="VelionBot ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        icon_url=bot_avatar
    )

    embed.set_footer(text="¬©VelionTeam - 2025")

    await ctx.send(embed=embed)


@bot.command()
async def profile(ctx):
    user_id = str(ctx.author.id)
    data = load_data()

    if user_id not in data:
        register_user(ctx.author)
        data = load_data()

    with open("users_data.json", "r") as f:
        users_data = json.load(f)

    user_data = data[user_id]
    daily = user_data.get("daily_activity", {})
    
    level = user_data.get("level", 1)
    xp = user_data.get("xp", 0)
    next_level_xp = level * 100
    progress = int((xp / next_level_xp) * 10)
    progress_bar = "üü©" * progress + "‚¨ú" * (10 - progress)

    wallet = user_data.get("wallet_balance", 0)
    bank = user_data.get("bank_balance", 0)

    steam = user_data.get("steam", "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ")
    twitch = user_data.get("twitch", "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ")
    daily_data = users_data.get(user_id, {}).get("daily_activity", {})
    commands_used = daily_data.get("commands_used", 0)
    messages_sent = daily_data.get("messages_sent", 0)
    

    embed = discord.Embed(
        title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {ctx.author.display_name}",
        description=f"`{user_data.get('username', ctx.author.name)}`",
        color=discord.Color.green()
    )

    embed.set_thumbnail(url=ctx.author.display_avatar.url)

    embed.add_field(
        name="üìà –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç",
        value=(
            f"–£—Ä–æ–≤–µ–Ω—å: `{level}`\n"
            f"–û–ø—ã—Ç: `{xp} / {next_level_xp}`\n"
            f"{progress_bar}"
        ),
        inline=False
    )

    embed.add_field(
        name="üí∞ –§–∏–Ω–∞–Ω—Å—ã",
        value=(
            f"–ö–æ—à–µ–ª—ë–∫: `{wallet}` üí∏\n"
            f"–ë–∞–Ω–∫: `{bank}` üè¶"
        ),
        inline=False
    )

    embed.add_field(
        name="üîó –ü—Ä–∏–≤—è–∑–∫–∏",
        value=(
            f"{'[Steam](' + steam + ')' if steam and steam != '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ' else 'Steam: –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ'}\n"
            f"{'[Twitch](' + twitch + ')' if twitch and twitch != '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ' else 'Twitch: –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ'}"
        ),
        inline=False
    )

    embed.add_field(
        name="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        value=(
            f"–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: `{messages_sent}`\n"
            f"–ö–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{commands_used}`"
        ),
        inline=False
    )
    bot_avatar = bot.user.avatar.url if bot.user.avatar else None

    embed.set_author(
        name="VelionBot ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å",
        icon_url=bot_avatar
    )

    embed.set_footer(text="¬©VelionTeam - 2025")

    await ctx.send(embed=embed)

@bot.command()
async def about(ctx):
    embed = discord.Embed(
        title=f"ü§ñ –û –±–æ—Ç–µ ‚Äî {info.BOTNAME}",
        description=info.DESCRIPTION,
        color=discord.Color(0x55ff99)
    )

    embed.add_field(name="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value=info.AUTHOR, inline=True)
    embed.add_field(name="üõ† –í–µ—Ä—Å–∏—è", value=info.VERSION, inline=True)
    embed.add_field(name="üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=info.LAST_UPDATE, inline=True)

    embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else "")
    embed.set_footer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Velion Bot!")
    bot_avatar = bot.user.avatar.url if bot.user.avatar else None

    embed.set_author(
        name="VelionBot ‚Ä¢ –û –±–æ—Ç–µ",
        icon_url=bot_avatar
    )

    embed.set_footer(text="¬©VelionTeam - 2025")

    view = discord.ui.View()
    view.add_item(discord.ui.Button(label="üåê –°–∞–π—Ç", url=info.WEBSITE))
    view.add_item(discord.ui.Button(label="üíª –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä", url=info.SUPPORT_SERVER))
    view.add_item(discord.ui.Button(label="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=info.SUPPORT_SERVER))

    await ctx.send(embed=embed, view=view)
    
@bot.command()
async def server(ctx):
    guild = ctx.guild
    embed = discord.Embed(
        title=guild.name,
        description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
        color=discord.Color.from_rgb(88, 255, 150)  # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π VelionBot
    )
    embed.set_thumbnail(url=guild.icon.url if guild.icon else discord.Embed.Empty)

    embed.add_field(name="üÜî ID —Å–µ—Ä–≤–µ—Ä–∞", value=guild.id, inline=True)
    embed.add_field(name="üëë –í–ª–∞–¥–µ–ª–µ—Ü", value=guild.owner.mention, inline=True)
    embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=guild.member_count, inline=True)
    embed.add_field(name="üìÖ –°–æ–∑–¥–∞–Ω", value=guild.created_at.strftime("%d.%m.%Y %H:%M:%S"), inline=False)
    embed.add_field(name="üí¨ –ö–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤", value=f"–¢–µ–∫—Å—Ç: {len(guild.text_channels)}, –ì–æ–ª–æ—Å: {len(guild.voice_channels)}", inline=True)
    embed.add_field(name="üåç –†–µ–≥–∏–æ–Ω", value=guild.preferred_locale or "–ù–µ —É–∫–∞–∑–∞–Ω", inline=True)

    embed.set_author(
        name="VelionBot ‚Ä¢ –ò–Ω—Ñ–æ –æ —Å–µ—Ä–≤–µ—Ä–µ",
        icon_url=bot.user.avatar.url if bot.user.avatar else None
    )
    embed.set_footer(text="¬© VelionTeam - 2025")

    await ctx.send(embed=embed)

@bot.command(name="stats")
async def stats(ctx):
    total_users = sum(guild.member_count for guild in bot.guilds)
    total_guilds = len(bot.guilds)
    total_commands = len(bot.commands)

    embed = discord.Embed(
        title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VelionBot",
        description=f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: **{total_guilds}**\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
                    f"–ö–æ–º–∞–Ω–¥: **{total_commands}**",
        color=discord.Color.from_rgb(88, 255, 152)
    )
    embed.set_author(name="VelionBot ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", icon_url=bot.user.avatar.url)
    embed.set_footer(text="¬© VelionTeam - 2025")
    await ctx.send(embed=embed)

@bot.command(name="invite")
async def invite(ctx):
    invite_url = f"https://discord.com/oauth2/authorize?client_id={bot.user.id}&permissions=8&scope=bot%20applications.commands"
    embed = discord.Embed(
        title="üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å VelionBot",
        description=f"[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä]({invite_url})",
        color=discord.Color.from_rgb(88, 255, 152)
    )
    embed.set_author(name="VelionBot ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", icon_url=bot.user.avatar.url)
    embed.set_footer(text="¬© VelionTeam - 2025")
    await ctx.send(embed=embed)

@bot.command(name="support")
async def support(ctx):
    support_link = "https://discord.gg/VelionSupport"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
    embed = discord.Embed(
        title="üõ†Ô∏è –°–µ—Ä–≤–µ—Ä –ü–æ–¥–¥–µ—Ä–∂–∫–∏ VelionBot",
        description=f"[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏]({support_link})",
        color=discord.Color.from_rgb(88, 255, 152)
    )
    embed.set_author(name="VelionBot ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", icon_url=bot.user.avatar.url)
    embed.set_footer(text="¬© VelionTeam - 2025")
    await ctx.send(embed=embed)

@bot.command(name="daily")
async def daily(ctx, member: discord.Member = None):
    member = member or ctx.author
    user_id = str(member.id)

    with open("users_data.json", "r") as f:
        users_data = json.load(f)

    daily_data = users_data.get(user_id, {}).get("daily_activity", {})
    commands_used = daily_data.get("commands_used", 0)
    messages_sent = daily_data.get("messages_sent", 0)

    embed = discord.Embed(
        title="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} —Å–µ–≥–æ–¥–Ω—è:\n"
                    f"üü¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥: **{commands_used}**\n"
                    f"üí¨ –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–π: **{messages_sent}**",
        color=discord.Color.from_rgb(88, 255, 152)
    )
    embed.set_author(name="VelionBot ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", icon_url=bot.user.avatar.url)
    embed.set_footer(text="¬© VelionTeam - 2025")
    await ctx.send(embed=embed)

@bot.command(name="top")
async def top_users(ctx):
    with open("users_data.json", "r", encoding="utf-8") as f:
        users_data = json.load(f)

    user_id = str(member.id)
    
    if user_id not in data:
        register_user(user)
        data = load_data()

    leaderboard = sorted(
        users_data.items(),
        key=lambda x: x[1].get("total_activity", {}).get("messages_sent", 0),
        reverse=True
    )

    embed = discord.Embed(
        title="üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π VelionBot",
        description="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
        color=discord.Color.from_rgb(100, 255, 100) 
    )
    embed.set_author(
        name="VelionBot ‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        icon_url=bot.user.avatar.url if bot.user.avatar else discord.Embed.Empty
    )
    embed.set_footer(text="¬© VelionTeam - 2025")

    for idx, (user_id, data) in enumerate(leaderboard[:10], start=1):
        user = bot.get_user(int(user_id)) or await bot.fetch_user(int(user_id))
        messages = data.get("total_activity", {}).get("messages_sent", 0)
        embed.add_field(
            name=f"{idx}. {user.name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
            value=f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: `{messages}`",
            inline=False
        )

    await ctx.send(embed=embed)

# VelionBank

def load_bank_data():
    if not os.path.exists("bank.json"):
        with open("bank.json", "w") as f:
            json.dump({}, f)
    with open("bank.json", "r") as f:
        return json.load(f)

def save_bank_data(data):
    with open("bank.json", "w") as f:
        json.dump(data, f, indent=4)

def generate_bank_id():
    return f"VEL-{random.randint(100000, 999999)}"

def generate_card_number():
    return f"VISA {random.randint(4000,4999)} {random.randint(1000,9999)} {random.randint(1000,9999)} {random.randint(1000,9999)}"

def get_limit(card_type):
    return {
        "Basic": 10000,
        "Red": 50000,
        "Green": 100000
    }[card_type]

@bot.command(aliases=["vb", "vb_info"])
async def velionbank(ctx):
    user_id = str(ctx.author.id)
    bank_data = load_bank_data()

    if user_id in bank_data:
        data = bank_data[user_id]
        embed = discord.Embed(
            title="üí≥ VelionBank ‚Äî –ü—Ä–æ—Ñ–∏–ª—å",
            description=f"**–î–µ—Ä–∂–∞—Ç–µ–ª—å:** {data['holder']}\n"
                        f"**–õ–æ–≥–∏–Ω:** `{data['username']}`\n"
                        f"**–¢–∏–ø –∫–∞—Ä—Ç—ã:** {data['card_type']}\n"
                        f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** `{data['card']}`\n"
                        f"**–ë–∞–Ω–∫-ID:** `{data['bank_id']}`\n"
                        f"**–ë–∞–ª–∞–Ω—Å:** üí† `{data['balance']} –ö-–≠`\n"
                        f"**–õ–∏–º–∏—Ç:** `{data['limit']} –ö-–≠`",
            color=discord.Color.green()
        )
        embed.set_author(name="VelionBank ‚Ä¢ –í–∞—à —Å—á—ë—Ç", icon_url=ctx.bot.user.avatar.url)
        embed.set_footer(text="¬© VelionTeam - 2025")
        embed.set_thumbnail(url="attachment://VelionBank.png")
        file = discord.File("imgs/VelionBank.png", filename="VelionBank.png")

        class BankButtons(View):
            def __init__(self):
                super().__init__(timeout=60)

            @discord.ui.button(label="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", style=discord.ButtonStyle.green, custom_id="deposit_button")
            async def deposit(self, interaction: discord.Interaction, button: discord.ui.Button):
                await interaction.response.send_message("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", ephemeral=True)

                def check(msg):
                    return msg.author == interaction.user and msg.channel == interaction.channel

                try:
                    msg = await bot.wait_for("message", check=check, timeout=30.0)
                    amount = int(msg.content)
                    data = load_data()
                    bank = load_bank_data()

                    if data.get(user_id, {}).get("wallet_balance", 0) < amount:
                        return await interaction.followup.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ.", ephemeral=True)

                    data[user_id]["wallet_balance"] -= amount
                    bank[user_id]["balance"] += amount
                    save_data(data)
                    save_bank_data(bank)
                    await interaction.followup.send(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –ö-–≠ –≤ –±–∞–Ω–∫.", ephemeral=True)

                except:
                    await interaction.followup.send("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", ephemeral=True)

            @discord.ui.button(label="–í—ã–≤–µ—Å—Ç–∏", style=discord.ButtonStyle.blurple, custom_id="withdraw_button")
            async def withdraw(self, interaction: discord.Interaction, button: discord.ui.Button):
                await interaction.response.send_message("üè¶ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", ephemeral=True)

                def check(msg):
                    return msg.author == interaction.user and msg.channel == interaction.channel

                try:
                    msg = await bot.wait_for("message", check=check, timeout=30.0)
                    amount = int(msg.content)
                    data = load_data()
                    bank = load_bank_data()

                    if bank.get(user_id, {}).get("balance", 0) < amount:
                        return await interaction.followup.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ.", ephemeral=True)

                    bank[user_id]["balance"] -= amount
                    data[user_id]["wallet_balance"] += amount
                    save_data(data)
                    save_bank_data(bank)
                    await interaction.followup.send(f"‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ {amount} –ö-–≠ –Ω–∞ –∫–æ—à–µ–ª—ë–∫.", ephemeral=True)

                except:
                    await interaction.followup.send("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", ephemeral=True)

        await ctx.send(embed=embed, view=BankButtons(), file=file)

    else:
        embed = discord.Embed(
            title="üè¶ VelionBank ‚Äî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            description="üí† **VelionBank** ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π –±–∞–Ω–∫ –≠—Ç–µ—Ä–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π —Å–µ—Ä–≤–∏—Å üíö\n"
                        "–°–æ–∑–¥–∞–π—Ç–µ —Å—á—ë—Ç, –≤—ã–±—Ä–∞–≤ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç—É:\n\n"
                        "üí≥ **Basic** ‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–æ | –õ–∏–º–∏—Ç: 10000 –ö-–≠\n"
                        "üíº **Red** ‚Äî 500 –ö-–≠ | –õ–∏–º–∏—Ç: 50000 –ö-–≠\n"
                        "üëë **Green** ‚Äî 1500 –ö-–≠ | –õ–∏–º–∏—Ç: 100000 –ö-–≠\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç.",
            color=discord.Color.green()
        )
        embed.set_author(name="VelionBank ‚Ä¢ –û –±–∞–Ω–∫–µ", icon_url=ctx.bot.user.avatar.url)
        embed.set_footer(text="¬© VelionTeam - 2025")
        embed.set_thumbnail(url="attachment://VelionBank.png")
        file = discord.File("imgs/VelionBank.png", filename="VelionBank.png")

        class CardTypeSelect(Select):
            def __init__(self):
                options = [
                    discord.SelectOption(label="Basic", description="–ë–µ—Å–ø–ª–∞—Ç–Ω–æ. –õ–∏–º–∏—Ç: 10000 –ö-–≠", emoji="üí≥"),
                    discord.SelectOption(label="Red", description="500 –ö-–≠. –õ–∏–º–∏—Ç: 50000 –ö-–≠", emoji="üíº"),
                    discord.SelectOption(label="Green", description="1500 –ö-–≠. –õ–∏–º–∏—Ç: 100000 –ö-–≠", emoji="üëë")
                ]
                super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã...", min_values=1, max_values=1, options=options)

            async def callback(self, interaction: discord.Interaction):
                selected = self.values[0]
                users_data = load_data()
                user_wallet = users_data.get(user_id, {}).get("wallet_balance", 0)

                cost = {"Basic": 0, "Red": 500, "Green": 1500}[selected]
                if user_wallet < cost:
                    await interaction.response.send_message(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ö-–≠ (—Ç—Ä–µ–±—É–µ—Ç—Å—è {cost}).", ephemeral=True)
                    return

                if user_id not in users_data:
                    users_data[user_id] = {"wallet_balance": 0}
                users_data[user_id]["wallet_balance"] -= cost
                save_data(users_data)

                bank_data[user_id] = {
                    "bank_id": generate_bank_id(),
                    "card": generate_card_number(),
                    "holder": str(ctx.author),
                    "username": ctx.author.name,
                    "balance": 0,
                    "card_type": selected,
                    "limit": get_limit(selected)
                }
                save_bank_data(bank_data)

                await interaction.response.send_message(f"‚úÖ –°—á—ë—Ç —Å –∫–∞—Ä—Ç–æ–π **{selected}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", ephemeral=True)

        class CreateAccountView(View):
            def __init__(self):
                super().__init__(timeout=60)
                self.add_item(CardTypeSelect())

        await ctx.send(embed=embed, view=CreateAccountView(), file=file)

@bot.command()
async def transfer(ctx, target: str = None, amount: int = None):
    user_id = str(ctx.author.id)
    bank_data = load_bank_data()

    if user_id not in bank_data:
        return await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—á—ë—Ç–∞ –≤ VelionBank. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!vb`, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

    if not target or not amount or amount <= 0:
        return await ctx.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!transfer [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã | bank_id] [—Å—É–º–º–∞]`")

    sender = bank_data[user_id]
    card_type = sender["card_type"]
    limits = {"Basic": 2000, "Red": 10000, "Green": 50000}
    transfer_limit = limits.get(card_type, 0)

    if amount > transfer_limit:
        return await ctx.send(f"‚ùå –õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã ({card_type}) ‚Äî `{transfer_limit} –ö-–≠`.")

    if sender["balance"] < amount:
        return await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

    target_user_id = None
    target_account = None

    if target.startswith("<@") and target.endswith(">"):
        mentioned_id = target.strip("<@!>")
        if mentioned_id in bank_data:
            target_user_id = mentioned_id
            target_account = bank_data[mentioned_id]

    if not target_account and target.isdigit() and len(target) == 16:
        for uid, data in bank_data.items():
            card_number = ''.join(data.get("card", "").split())  
            if card_number.endswith(target):
                target_user_id = uid
                target_account = data
                break

    if not target_account:
        for uid, data in bank_data.items():
            if data.get("bank_id") == target:
                target_user_id = uid
                target_account = data
                break

    if not target_account:
        return await ctx.send("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∫–∞—Ä—Ç–µ, Bank-ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é.")

    if target_user_id == user_id:
        return await ctx.send("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ.")

    sender["balance"] -= amount
    target_account["balance"] += amount
    save_bank_data(bank_data)

    embed = discord.Embed(
        title="üí∏ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
        description=(
            f"‚úÖ **{ctx.author.name}** –ø–µ—Ä–µ–≤—ë–ª **{amount} –ö-–≠** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{target_account['holder']}**\n"
            f"üí≥ –°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: `{sender['card']}`\n"
            f"üè¶ –°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è: `{target_account['card']}`"
        ),
        color=discord.Color.green()
    )
    embed.set_footer(text="VelionBank ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
    embed.set_author(name="üí† VelionBank", icon_url=ctx.bot.user.avatar.url)
    await ctx.send(embed=embed)

@bot.command()
async def mycard(ctx):
    user_id = str(ctx.author.id)
    bank_data = load_bank_data()

    if user_id not in bank_data:
        return await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—á—ë—Ç–∞ –≤ VelionBank. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!vb`, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

    user_bank = bank_data[user_id]
    card_type = user_bank["card_type"]
    card_number = user_bank["card"].replace(" ", "") 
    balance = user_bank["balance"]
    holder = user_bank["holder"]
    bank_id = user_bank["bank_id"]

    card_icons = {
        "Basic": "imgs/basic_card.png",
        "Red": "imgs/red_card.png",
        "Green": "imgs/green_card.png"
    }

    icon_path = card_icons.get(card_type, "imgs/basic_card.png")

    file = discord.File(icon_path, filename="card_icon.png")

    embed = discord.Embed(
        title="üí≥ –ú–æ—è –ö–∞—Ä—Ç–∞ VelionBank",
        color=discord.Color.from_rgb(33, 150, 83),
        description=(
            f"üë§ **–î–µ—Ä–∂–∞—Ç–µ–ª—å:** `{holder}`\n"
            f"üíº **–¢–∏–ø –∫–∞—Ä—Ç—ã:** `{card_type}`\n"
            f"üè¶ **Bank-ID:** `{bank_id}`\n"
            f"üí∞ **–ë–∞–ª–∞–Ω—Å:** `{balance} –ö-–≠`\n"
            f"üì• **–ú–∞–∫—Å. –ø–µ—Ä–µ–≤–æ–¥:** `{['2000','10000','50000'][['Basic','Red','Green'].index(card_type)]} –ö-–≠`\n"
        )
    )
    embed.set_thumbnail(url="attachment://card_icon.png")
    embed.set_footer(text=f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number}")
    embed.set_author(name="VelionBank ‚Ä¢ –ö–∞—Ä—Ç–∞", icon_url=ctx.bot.user.avatar.url)

    await ctx.send(embed=embed, file=file)

def load_users_data():
    try:
        with open("users_data.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_users_data(data):
    with open("users_data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_privileges():
    try:
        with open("privileges.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_privileges(data):
    with open("privileges.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

shop_items = {
    "VIP": {
        "base_price": 10000,
        "description": "üéâ VIP ‚Äî –±–æ–Ω—É—Å –∫ –æ–ø—ã—Ç—É +20%, –±–æ–Ω—É—Å –∫ –∑–∞—Ä–∞–±–æ—Ç–∫–∞–º +25%, –∫—É–ª–¥–∞—É–Ω—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ 15%."
    },
    "Elite": {
        "base_price": 15000,
        "description": "üëë Elite ‚Äî –±–æ–Ω—É—Å –∫ –æ–ø—ã—Ç—É +50%, –±–æ–Ω—É—Å –∫ –∑–∞—Ä–∞–±–æ—Ç–∫–∞–º +35%, –∫—É–ª–¥–∞—É–Ω—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ 30%."
    },
    "Green": {
        "base_price": 25000,
        "description": "üíö Green ‚Äî –≤—Å—ë –∏–∑ Elite + –±—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –±–æ–Ω—É—Å—ã 55%."
    }
}

durations = {
    "–ù–µ–¥–µ–ª—è": 7,
    "–ú–µ—Å—è—Ü": 30,
    "–ù–∞–≤—Å–µ–≥–¥–∞": None
}

class DurationSelect(Select):
    def __init__(self, privilege_name, user_id):
        options = []
        for key, days in durations.items():
            multiplier = 0.5 if key == "–ù–µ–¥–µ–ª—è" else 1 if key == "–ú–µ—Å—è—Ü" else 3
            price = int(shop_items[privilege_name]["base_price"] * multiplier) if days is not None else "‚Äî"
            desc = f"{price} –ö-–≠" if price != "‚Äî" else "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
            emoji = "‚è≥" if days is not None else "‚ôæÔ∏è"
            options.append(discord.SelectOption(label=key, description=desc, emoji=emoji))
        self.privilege_name = privilege_name
        self.user_id = user_id
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        choice = self.values[0]
        base_price = shop_items[self.privilege_name]["base_price"]
        multiplier = 0.5 if choice == "–ù–µ–¥–µ–ª—è" else 1 if choice == "–ú–µ—Å—è—Ü" else 3
        price = int(base_price * multiplier)

        bank_data = load_bank_data()
        users_data = load_users_data()
        privileges = load_privileges()

        user_bank_balance = bank_data.get(self.user_id, {}).get("balance", 0)
        user_wallet_balance = users_data.get(self.user_id, {}).get("wallet_balance", 0)
        total_funds = user_bank_balance + user_wallet_balance

        if total_funds < price:
            await interaction.response.send_message(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({total_funds} –ö-–≠), –Ω—É–∂–Ω–æ {price} –ö-–≠.", ephemeral=True)
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: —Å–Ω–∞—á–∞–ª–∞ —Å –±–∞–Ω–∫–∞, –ø–æ—Ç–æ–º —Å –∫–æ—à–µ–ª—å–∫–∞
        remaining = price
        if user_bank_balance >= remaining:
            bank_data[self.user_id]["balance"] -= remaining
            remaining = 0
        else:
            remaining -= user_bank_balance
            bank_data[self.user_id]["balance"] = 0
            users_data.setdefault(self.user_id, {})
            users_data[self.user_id]["wallet_balance"] = users_data[self.user_id].get("wallet_balance", 0) - remaining

        save_bank_data(bank_data)
        save_users_data(users_data)

        expires_at = None
        if durations[choice]:
            expires_at = (datetime.utcnow() + timedelta(days=durations[choice])).isoformat()

        privileges[self.user_id] = {
            "privilege": self.privilege_name,
            "expires_at": expires_at
        }
        save_privileges(privileges)

        await interaction.response.send_message(
            f"‚úÖ –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è **{self.privilege_name}** —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ –Ω–∞ —Å—Ä–æ–∫ **{choice}**!",
            ephemeral=True
        )
        # –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        self.view.clear_items()
        await interaction.message.edit(view=self.view)

class PrivilegeSelect(Select):
    def __init__(self, user_id):
        options = []
        for key, data in shop_items.items():
            options.append(discord.SelectOption(label=key, description=data["description"], emoji="üí†"))
        self.user_id = user_id
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        selected = self.values[0]
        view = View(timeout=60)
        view.add_item(DurationSelect(selected, self.user_id))
        await interaction.response.send_message(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é **{selected}**.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:",
            ephemeral=True,
            view=view
        )

class ShopView(View):
    def __init__(self, user_id):
        super().__init__(timeout=120)
        self.add_item(PrivilegeSelect(user_id))

@bot.command()
async def shop(ctx):
    user_id = str(ctx.author.id)
    bank_data = load_bank_data()
    users_data = load_users_data()

    if user_id not in bank_data:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—á—ë—Ç–∞ –≤ VelionBank. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `!vb`.")
        return

    embed = discord.Embed(
        title="üõí –ú–∞–≥–∞–∑–∏–Ω VelionBank",
        description="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–Ω–∫–µ –∏ –∫–æ—à–µ–ª—å–∫–µ.",
        color=discord.Color.green()
    )
    embed.set_footer(text="VelionBank ‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω")

    await ctx.send(embed=embed, view=ShopView(user_id))

PRIVILEGES = {
    'vip': {'bonus_percent': 0.20, 'cd_reduction': 0.15},
    'elite': {'bonus_percent': 0.35, 'cd_reduction': 0.30},
    'green': {'bonus_percent': 0.55, 'cd_reduction': 0.55},
}

BASE_AMOUNT = 30
BASE_COOLDOWN_HOURS = 10

@bot.command()
async def timely(ctx):
    user_id = str(ctx.author.id)
    data = load_data()  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    privileges = load_privileges()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    if user_id not in data:
        data[user_id] = {
            'wallet_balance': 0,
            'last_claim': '1970-01-01T00:00:00'
        }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –æ–Ω–∞
    now = datetime.utcnow()
    user_priv = privileges.get(user_id)
    if user_priv:
        expires_at = datetime.fromisoformat(user_priv.get('expires_at'))
        if expires_at < now:
            # –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –∏—Å—Ç–µ–∫–ª–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –±–µ–∑ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
            user_privilege = None
        else:
            user_privilege = user_priv.get('privilege').lower()  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å–ª–æ–≤–∞—Ä—è PRIVILEGES
    else:
        user_privilege = None

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –∏ –∫—É–ª–¥–∞—É–Ω
    bonus_percent = PRIVILEGES[user_privilege]['bonus_percent'] if user_privilege in PRIVILEGES else 0
    cd_reduction = PRIVILEGES[user_privilege]['cd_reduction'] if user_privilege in PRIVILEGES else 0

    bonus = int(BASE_AMOUNT * (1 + bonus_percent))
    cooldown = timedelta(hours=BASE_COOLDOWN_HOURS * (1 - cd_reduction))

    last_claim_str = data[user_id]['last_claim']
    last_claim = datetime.fromisoformat(last_claim_str)
    time_passed = now - last_claim

    if time_passed < cooldown:
        remaining = cooldown - time_passed
        total_seconds = int(remaining.total_seconds())
        hours, remainder = divmod(total_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        await ctx.send(f"‚è≥ –¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º {seconds}—Å.")
        return

    # –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    data[user_id]['wallet_balance'] += bonus
    data[user_id]['last_claim'] = now.isoformat()

    save_data(data)

    await ctx.send(f"‚úÖ {ctx.author.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª {bonus} –∫-—ç! –°–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {data[user_id]['wallet_balance']} –∫-—ç.")

@bot.event
async def on_ready():
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.watching,
            name="!help –¥–ª—è –ø–æ–º–æ—â–∏"
        ),
        status=discord.Status.idle
    )

    save_json("mutes.json", mutes)
    reset_activity.start()
    print(f"üîå –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

bot.run(BOT_TOKEN)
